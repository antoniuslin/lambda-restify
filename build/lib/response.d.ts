/// <reference types="node" />
import { LamdaCallback } from './lambda_callback';
import Request from './request';
import Logger from './logger';
import { Formatters } from './server_options';
export default class Response {
    private lambdaCallback;
    private req;
    log: Logger;
    private formatters;
    private acceptable;
    sendDate: boolean;
    statusCode: number;
    statusMessage: string;
    _meta: any;
    serverName: string;
    version: string;
    private _finished;
    readonly finished: boolean;
    private _headersSent;
    readonly headersSent: boolean;
    private _headers;
    private lambdaCallbackCalled;
    private _body;
    private _data;
    private _charSet;
    constructor(lambdaCallback: LamdaCallback, req: Request, log: Logger, formatters: Formatters, acceptable: string[]);
    cache(type?: any, options?: any): any;
    noCache(): this;
    header(name: string, value?: any): any;
    setHeader(name: string, value: any): any;
    getHeaders(): {};
    headers(): {};
    send(code?: any, body?: any, headers?: any): any;
    sendRaw(code?: any, body?: any, headers?: any): any;
    removeHeader(name: any): void;
    writeHead(code?: any, message?: any, headers?: any): void;
    write(chunk: string | Buffer, encoding?: string, callback?: any): boolean;
    end(data?: string | Buffer, encoding?: string, callback?: any): void;
    get(name: string): any;
    json(code?: any, object?: any, headers?: any): any;
    link(l: any, rel: any): any;
    charSet(type: string): this;
    redirect(arg1: any, arg2?: any, arg3?: any): any;
    status(code: any): any;
    set(name: any, val?: any): this;
    getHeaderNames(): string[];
    hasHeader(name: string): boolean;
    writeContinue(): void;
    private __send;
    private calllambdaCallback;
}
